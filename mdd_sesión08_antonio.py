# -*- coding: utf-8 -*-
"""MdD_Sesión08_Antonio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d8vS8U5B6RKzJx1pHqWCIIj8xZCddjPX

# <font color = #009b7d> Minería de Datos </font>
## <font color = #009b7d> Sesión 08: Python - Colecciones de datos </font>
### <font color = #009b7d>Prof: Vilchis García Juan Ignacio </font>
#### <font color = #009b7d>Alumno: Rodríguez Esquivel Luis Antonio </font>
#### <font color = #009b7d>Fecha: Miercoles 24 de septiembre de 2025 </font>

# Colecciones de datos:

Son tipos de datos que permiten almacenar múltiples valores en una sola variable.

Actúan como contenedores organizados para agrupar elementos de forma eficiente, facilitando su manipulación y acceso

## Listas

  * Son colecciones ordenadas y mutables.
  
  * Esto significa que se pueden cambiar sus elementos (agregar, eliminar o modificar) después de crearlas.
  
  * Se definen con corchetes [] y se utilizan para almacenar datos de cualquier tipo.
  
  * Su principal uso es mantener una colección de elementos en un orden específico que pueda ser modificado.
"""

#Crear listas
lista1 = ["Paloma", "Carlos"]
lista2 = ["Samara", "Antonio"]

print(lista1)
print(lista2)

# Append

lista1.append("Oscar")
lista2.append("Alejandro")

print(lista1)
print(lista2)

# Unir

lista = lista1 + lista2

print(lista)

# Extend

lista1.extend(lista2)
print(lista1)

# Indices
print(lista[0])
print(lista[2])
print(lista[4])

#
print(lista1)
lista1[0] = "Fernando"
print(lista1)

# len
print(len(lista))

# count
print(lista)
lista.append("Paloma")
lista.append("Oscar")
lista.append("Antonio")
print(lista)
print(lista.count("Carlos"))
print(lista.count("Oscar"))

# remove
lista.remove("Oscar")
print(lista)

# Index
print(lista)
print(lista.index("Carlos"))
print(lista.index("Samara"))
print(lista.index("Alejandro"))

# Insert
print(lista)
lista.insert(2, "Samantha")
lista.insert(4, "Vilchis")
lista.insert(10, "Diana")
print(lista)

# pop

print(lista)
lista.pop()
print(lista)
lista.pop(2)
print(lista)

# Slicing (división)

print(lista)
print(lista[2:5])
print(lista[:5])
print(lista[3:])

# Reverse
print(lista)
lista.reverse()
print(lista)

# Sort
print(lista)
lista.sort()
print(lista)

# Sort (reverse = True)
print(lista)
lista.sort(reverse = True)
print(lista)

# Recorrer lista
for elemento in lista:
  print(elemento)

# Operador de pertenencia (in, not in)
print(lista)
lista3 = ["Carlos"]
lista4 = ["Fernando"]
lista5 = "Alejandro"
print(lista3 in lista)
print(lista3 not in lista)

print(lista4 in lista)
print(lista4 not in lista)
print(lista5 in lista)
print(lista5 not in lista)

# Clear()
lista.clear()
print(lista)

"""### Ejercicio Propuesto 8.01

Dada la siguiente lista = [1,2,5,25,33,56,75,21,56,89,43,13,62,24]
1. Mostrar mediante el método "print" y el operador "in" y "not in":
  
  -Si el número 21 está en la lista

  -Si el número 43 está en la lista

  -Si el número 17 no está en la lista

  -Si el número 89 está en la lista

2. Mostrar los elementos de la lista con los indices: 0, 4, 7, 9, 11.

3. Agregar los elementos: 15, 23, 14, 27 y 58.

4. Eliminar los elementos: 25, 33, 75, 56, 24.

5. Recorrer la lista con "for".

6. Limpiar los elementos de la lista.
"""

# 1. Mostrar mediante el método "print" y el operador "in" y "not in":

lista = [1,2,5,25,33,56,75,21,56,89,43,13,62,24]
print(21 in lista)
print(21 not in lista)
print(43 in lista)
print(43 not in lista)
print(17 in lista)
print(17 not in lista)
print(89 in lista)
print(89 not in lista)

# 2. Mostrar los elementos de la lista con los indices: 0, 4, 7, 9, 11.
print(lista[0])
print(lista[4])
print(lista[7])
print(lista[9])
print(lista[11])

# 3. Agregar los elementos: 15, 23, 14, 27 y 58

print(lista)
lista.append(15)
lista.append(23)
lista.append(14)
lista.append(27)
lista.append(58)
print(lista)

# 4. Eliminar los elementos: 25, 33, 75, 56, 24.

print(lista)
lista.remove(25)
lista.remove(33)
lista.remove(75)
lista.remove(56)
lista.remove(24)
print(lista)

# 5. Recorrer la lista con "for".

for i in lista:
  print(i)

# 6. Limpiar los elementos de la lista.

lista.clear()
print(lista)

"""## Tuplas

  * Son colecciones ordenadas e inmutables.
  
  * Una vez que se crea una tupla, no se pueden cambiar sus elementos.
  
  * Se definen con paréntesis () o simplemente separando los elementos con comas.
  
  * Son más rápidas que las listas y se usan para datos que no deben cambiar, como coordenadas geográficas o información de configuración.

"""

#Creación

tupla = ("rojo", "amarillo", "verde", "negro", "rosa", "naranja")
print(tupla)

# Acceso
print(tupla[2])
print(tupla[0])
print(tupla[5])

# Slicing (división)
print(tupla)
print(tupla[1:4])
print(tupla[2:5])

# Búsqueda
print(tupla)
indice = tupla.index("verde")
print(indice)

# Conteo (count)
print(tupla.count("rojo"))
print(tupla.count("azul"))

# Error porque tupla es inmutable
print(tupla)
#tupla[2] = "cafe"

# Recorrer tupla
for color in tupla:
  print(color)

# Longitud
print(len(tupla))

# In
print("azul" in tupla)
print("negro" in tupla)

# sorted
print(sorted(tupla))

#Concatenar
tupla2 = ("morado", "blanco")
nuevaTupla = tupla + tupla2
nuevaTupla

# Desempacar
coordenadas = (10, 20)
x, y = coordenadas
print(f'x: {x}, y: {y}')

# Conversión a Tupla
lista_colores = ["morado", "vino", "cafe"]
print(lista_colores)
tupla_colores = tuple(lista_colores)
print(tupla_colores)

"""### Ejercicio Propuesto 8.02
1. Crear una variable "tupla" que sea una tupla de los siguientes nombres: Bruce, Steve, Adrian, Janick, Nicko y Dave.
2. Mostrar el valor de la variable "tupla".
3. Ingresar un nombre por teclado y almacenarlo en la variable "dato".
4. Si el valor de "dato" está dentro de los valores de la variable "tupla", mostrar "Sí esta en la tupla". De lo contrario mostrar "No esta en la tupla".
5. Mostrar los elementos de la tupla: 0, 2, 4.
6. Mostrar el número de elementos de la tupla.
7. Recorrer la tupla con la estructura "for".
"""

# 1. Crear una variable "tupla" que sea una tupla de los siguientes nombres: Bruce, Steve, Adrian, Janick, Nicko y Dave.

tupla = ('Bruce', 'Steve', 'Adrian', 'Janink', 'Nicko', 'Dave')

# 2. Mostrar el valor de la variable "tupla".
print(tupla)

# 3. Ingresar un nombre por teclado y almacenarlo en la variable "dato".
# Error porque tupla es inmutable
print(tupla)
#tupla[2] = "Tuny"

dato = 'Tuny'

# 4. Si el valor de "dato" está dentro de los valores de la variable "tupla", mostrar "Sí esta en la tupla". De lo contrario mostrar "No esta en la tupla".

#Error porque no se guardo en Tupla
if dato in tupla:
    print("Sí está en la tupla")
else:
    print("No está en la tupla")

# 5. Mostrar los elementos de la tupla: 0, 2, 4.
print(tupla[0])
print(tupla[2])
print(tupla[4])

# 6. Mostrar el número de elementos de la tupla.
print(len(tupla))

# 7. Recorrer la tupla con la estructura "for".
for i in tupla:
  print(i)

"""## Conjuntos

  * Son colecciones no ordenadas y mutables que no permiten elementos duplicados.
  
  * Son ideales para eliminar duplicados de una lista o para realizar operaciones matemáticas de conjuntos, como uniones e intersecciones.
  
  * Se definen con llaves {} o con la función set().
  
  * No tienen un índice, por lo que no se puede acceder a sus elementos de la misma forma que en las listas o tuplas.
"""

# Creación
colores = {"rosa", "blanco", "rojo", "naranja", "negro", "morado"}
colores

# Creacion
lista = ["rosa", "blanco", "rojo", "naranja", "negro", "morado"]
print(lista)
colores =set(lista)
print(colores)

#Recorrer conjunto
for i in colores:
  print(i)

#Conjuntos no tiene indices
#print(colores[3])
print(colores)

# longitud
len(colores)

# Agregar elementos
colores.add("verde")
print(colores)

# Eliminar elementos (remove)
print(colores)
colores.remove("negro")
print(colores)

#Actualizar

print(colores)
colores.update(['dorado', 'plateado'])
print(colores)

# Eliminar elemento (discard)
print(colores)
colores.discard("rojo")
print(colores)

# Pop
print(colores)
color_eliminado = colores.pop()
print(colores)
print(color_eliminado)

# Verificar tipo de colección
type(colores)

#clear
colores.clear()
print(colores)

"""### Teoría de  conjuntos"""

# Union (Combina todos los elementos de ambos conjuntos sin duplicados. Se puede usar el método union() o el operador |.)
a = {1, 2, 3}
b = {3, 4, 5}
union_conjuntos = a.union(b)
# o bien
union_operador = a | b
print(union_conjuntos)

# Intersección (Devuelve los elementos que están presentes en ambos conjuntos. Se usa intersection() o el operador &.)
a = {1, 2, 3}
b = {3, 4, 5}
interseccion_conjuntos = a.intersection(b)
# o bien
interseccion_operador = a & b
print(interseccion_conjuntos)

# Diferencia (Devuelve los elementos que están en el primer conjunto pero no en el segundo. Se usa difference() o el operador -.)
a = {1, 2, 3}
b = {3, 4, 5}
diferencia_conjuntos = a.difference(b)
# o bien
diferencia_operador = a - b
print(diferencia_conjuntos)

# Diferencia simétrica (Devuelve los elementos que están en uno de los conjuntos, pero no en ambos. Se usa symmetric_difference() o el operador ^.)
a = {1, 2, 3}
b = {3, 4, 5}
diferencia_simetrica = a.symmetric_difference(b)
# o bien
diferencia_simetrica_operador = a ^ b
print(diferencia_simetrica)

# Busqueda (in: Verifica si un elemento existe en el conjunto. Es muy rápido para esta operación.)
numeros = {1, 2, 3}
print(2 in numeros)

# No elementos en común (isdisjoint(): Devuelve True si los conjuntos no tienen elementos en común, False en caso contrario.)
a = {1, 2}
b = {3, 4}
print(a.isdisjoint(b))

# Subconjunto de otro (issubset(): Devuelve True si el conjunto es un subconjunto de otro (es decir, todos sus elementos están en el otro conjunto).)
a = {1, 2}
b = {1, 2, 3}
print(a.issubset(b))

# Superconjunto de otro (issuperset(): Devuelve True si el conjunto es un superconjunto de otro (es decir, contiene todos los elementos del otro conjunto).)
a = {1, 2, 3}
b = {1, 2}
print(a.issuperset(b))

"""### Ejercicio Propuesto 8.03

1. Crear una variable "conjunto" que sea un conjunto de los valores 1,2,3,4 y 5.
2. Mostrar el valor de la variable "conjunto".
3. Añadir los números 6,7,8 y 9 a la variable conjunto.
4. Mostrar el valor de la variable "conjunto".
5. Eliminar los números 9, 7 y 3 de la variable "conjunto".
6. Mostrar el valor de la variable "conjunto".
7. Verificar el tipo de la variable "conjunto".
"""

# 1. Crear una variable "conjunto" que sea un conjunto de los valores 1,2,3,4 y 5.
conjunto = {1, 2, 3, 4, 5}

# 2. Mostrar el valor de la variable "conjunto".
print(conjunto)

# 3. Añadir los números 6,7,8 y 9 a la variable conjunto.

conjunto.add(6)
conjunto.add(7)
conjunto.add(8)
conjunto.add(9)

# 4. Mostrar el valor de la variable "conjunto".
conjunto

# 5. Eliminar los números 9, 7 y 3 de la variable "conjunto".
conjunto.remove(9)
conjunto
conjunto.discard(7)
conjunto
conjunto.remove(3)
conjunto

# 6. Mostrar el valor de la variable "conjunto".
conjunto

# 7. Verificar el tipo de la variable "conjunto".
type(conjunto)

"""#Cargas de datos

DataFrame:

en la biblioteca pandas de Python es una estructura de datos bidimensional, similar a una hoja de cálculo de Excel o una tabla de una base de datos.

Características clave:

  * Columnas y Filas: Está organizado en columnas y filas. Cada columna puede contener diferentes tipos de datos (números, texto, fechas, etc.), pero dentro de una misma columna, los datos son del mismo tipo.

  * Etiquetas (Labels): Tanto las filas como las columnas tienen etiquetas (índices). Esto permite acceder a los datos de manera flexible, ya sea por el nombre de la columna o por el índice de la fila.

  * Versatilidad: Es la estructura fundamental de pandas para manipular y analizar datos. Se puede usar para cargar, limpiar, transformar y visualizar información de diversas fuentes, como archivos CSV, bases de datos o APIs.

  * El DataFrame simplifica y hace más eficiente el trabajo con conjuntos de datos tabulares en Python.

Crear los archivos

* Datos.txt
* Datos.csv
* Datos_Barra.csv
* Datos_Punto_y_coma.csv
* Datos.xlsx

Exportar los archivos

* KillersCSV.csv
* KillersTXT.txt
* KillersXLSX.xlsx

### Leer CSV
"""

# Biblioteca
import pandas as pd

data = pd.read_csv('datos.csv')
data

### Delimiter
data_c = pd.read_csv('datos.csv', delimiter= ',')
data_c

data_b = pd.read_csv('datos_barra.csv', delimiter = '|')
data_b

data_pyc = pd.read_csv('datos_punto_y_como.csv', delimiter = ';')
data_pyc

"""### Header"""

data = pd.read_csv('datos.csv')
data
#data = pd.read_csv('datos.csv', header = 0)
#data

data = pd.read_csv('datos.csv', header = 1)
data

data = pd.read_csv('datos.csv', header = 4)
data

"""### Names"""

data = pd.read_csv('datos.csv')
data

data = pd.read_csv('datos.csv', names = ['NOMBRE','APELLIDO','Nivel','CARRERA','SEMESTRE','CENTRO DE ESTUDIOS','SIGNO ZODIACAL','COLOR','ANIMAL','DEPORTE','PELICULA','GRUPO MUSICAL'])
data